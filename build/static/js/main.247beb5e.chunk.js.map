{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","Notification","message","className","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","console","log","length","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.247beb5e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n\tconst label = note.important ? 'make not important' : 'make important'\n  return (\n    <li>{note.content}\n\t\t<button onClick={toggleImportance}>{label}</button>\n\t</li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n\tif (message === null) {\n\t  return null\n\t}\n\n\treturn (\n\t  <div className=\"error\">\n\t\t{message}\n\t  </div>\n\t)\n  }\n\n  export default Notification","import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/notes'\nconst baseUrl = 'https://secret-sands-68648.herokuapp.com/api/notes'\n\nconst getAll = () => {\n//   return axios.get(baseUrl)\n\tconst request = axios.get(baseUrl)\n\tconst nonExisting = {\n\t\tid: 10000,\n\t\tcontent: 'This note is not saved to server',\n\t\tdate: '2019-05-30T17:30:31.098Z',\n\t\timportant: true,\n\t  }\n  \treturn request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n//   return axios.post(baseUrl, newObject)\n\tconst request = axios.post(baseUrl, newObject)\n\treturn request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n//   return axios.put(`${baseUrl}/${id}`, newObject)\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\treturn request.then(response => response.data)\n}\n\nexport default {\n  getAll,\n  create,\n  update\n}","import React from 'react'\n\nconst Footer = () => {\n\tconst footerStyle = {\n\t  color: 'green',\n\t  fontStyle: 'italic',\n\t  fontSize: 16\n\t}\n\n\treturn (\n\t  <div style={footerStyle}>\n\t\t<br />\n\t\t<em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n\t  </div>\n\t)\n  }\n\n  export default Footer","import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\nimport  './index.css'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport Footer from './components/Footer'\n\nconst App = () => {\n\tconst [notes, setNotes] = useState([])\n\tconst [newNote, setNewNote] = useState('a new note ...')\n\tconst [showAll, setShowAll] = useState(true)\n\tconst [errorMessage, setErrorMessage] = useState(null)\n\n\tconst toggleImportanceOf = (id) => {\n\t\tconst note = notes.find(n => n.id === id)\n\t\tconst changedNote = {...note, important: !note.important }\n\t\t// axios.put(url, changedNote)\n\t\tnoteService\n\t\t\t.update(id, changedNote)\n\t\t\t.then(returnedNote => {\n\t\t\t\tsetNotes(notes.map(note => note.id !== id ? note : returnedNote))\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(`the note '${note.content}' was already deleted from server`)\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetErrorMessage(null)\n\t\t\t\t}, 5000)\n\t\t\t\tsetNotes(notes.filter(n => n.id !== id))\n\t\t\t})\n\t\t}\n\n\tuseEffect(() => {\n\t\t// \taxios\n    //   .get('http://localhost:3001/notes')\n\t\tnoteService\n\t\t.getAll()\n      \t.then(initialNotes => {\n\t\t\tsetNotes(initialNotes)\n      \t})\n\t}, [])\n\n\tconsole.log('render', notes.length, 'notes')\n\n\tconst handleNoteChange = (event) => {\n\t\tconsole.log(event.target.value)\n\t\tsetNewNote(event.target.value)\n\t\tconsole.log('new note: ', newNote)\n\t\tconsole.log('notes: ', notes)\n\t}\n\n\n\tconst addNote = (event) => {\n\t\tevent.preventDefault()\n\t\tconst noteObject = {\n\t\t\tcontent: newNote,\n\t\t\tdate: new Date().toISOString(),\n\t\t\timportant: Math.random() < 0.5,\n\t\t\t// id: notes.length + 1,\n\t\t}\n\t\tsetNotes(notes.concat(noteObject))\n\t\tsetNewNote('')\n\n\t\t// axios\n\t\t// .post('http://localhost:3001/notes', noteObject)\n\t\tnoteService\n\t\t.create(noteObject)\n\t\t.then(returnedNote => {\n\t\t\tsetNotes(notes.concat(returnedNote))\n\t\t\tsetNewNote('')\n\t\t})\n\t}\n\tconst notesToShow = showAll ? notes : notes.filter(note => note.important)\n\treturn (\n\t  <div>\n\t\t<h1>Notes</h1>\n\t\t<Notification message={errorMessage} />\n\t\t<div>\n\t\t\t<button onClick={()=> setShowAll(!showAll)}>\n\t\t\t\tshow {showAll ? 'important' : 'all'}\n\t\t\t</button>\n\t\t</div>\n\t\t<ul>\n\t\t\t{notesToShow.map(note =>\n\t\t\t<Note key={note.id} note={note} toggleImportance={()=>toggleImportanceOf(note.id)}/>\n\t\t\t)}\n\t\t</ul>\n\t\t<form onSubmit={addNote}>\n\t\t\t<input value={newNote}  onChange={handleNoteChange} />\n\t\t\t<button type=\"submit\">save</button>\n\t\t</form>\n\t\t<Footer />\n\t  </div>\n\t)\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n  )\n\n\n"],"sourceRoot":""}